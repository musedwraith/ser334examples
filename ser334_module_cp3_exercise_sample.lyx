#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\branch soln
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\branch blank
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
Arizona State University
\begin_inset space \hfill{}
\end_inset

SER334: Operating Systems & Networks
\end_layout

\begin_layout Standard
\noindent
UGTA Lisonbee
\begin_inset space \hfill{}
\end_inset

Revised 1/21/2019
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size huge
Unit 3 Sample Problems - C Programming III
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
In this sample problem set, we will practice advanced concepts in the C
 programming language.
\end_layout

\begin_layout Itemize
Length: (pending in-class use data)
\end_layout

\begin_layout Itemize
Questions: Q1-Q4.
\end_layout

\begin_layout Standard
\begin_inset Formula $\;$
\end_inset


\end_layout

\begin_layout Standard

\series bold
Learning Objectives:
\end_layout

\begin_layout Enumerate
Understand how the preprocessor works in C.
 
\begin_inset CommandInset label
LatexCommand label
name "lo_preprocessor"

\end_inset


\end_layout

\begin_layout Enumerate
Apply multiple source files, the preprocessor, and the linker to construct
 modular programs.
 
\begin_inset CommandInset label
LatexCommand label
name "lo_modularprog"

\end_inset


\end_layout

\begin_layout Enumerate
Apply procedural programming techniques to perform object-oriented programming.
 
\begin_inset CommandInset label
LatexCommand label
name "lo_oopinc"

\end_inset


\end_layout

\begin_layout Enumerate
Apply a file format specification and a file I/O library to read and write
 binary files.
 
\begin_inset CommandInset label
LatexCommand label
name "lo_binaryfiles"

\end_inset


\end_layout

\begin_layout Section*

\series bold
\size larger
\begin_inset Formula $\;\;\,\;$
\end_inset

The Preprocessor 
\end_layout

\begin_layout Enumerate
TODO
\end_layout

\begin_deeper
\begin_layout Section*
Modular Programming
\end_layout

\begin_layout Section*

\series bold
OOP in C
\end_layout

\begin_layout Standard
(TODO: this question should be updated to be about implementing a String
 ADT.)
\end_layout

\begin_layout Standard
Implement a stack ADT using a struct and seven functions.
 A stack is a simple LIFO collection that we can use to store elements.
 Although a stack is an OOP concept, we can still implement it in C with
 a clever design.
 We will even aim to implement it such that any datatype may be stored in
 it.
 The struct should variables to represent an internal data structure, and
 the size of the collection.
 Create seven functions: stack_create, stack_destroy, stack_push, stack_pop,
 stack_is_empty, stack_size, and stack_display.
 Describes of each are shown on the next page.
\end_layout

\begin_layout Standard
Your ADT will be structured with three files: main.c, stack.h, and stack.c.
 The first file (main.c) is provided below, while you will need to implement
 stack.h/c.
 The main.c file contains testing code that uses the stack you will be implementi
ng - it indirectly shows the syntax for the functions.
\end_layout

\begin_layout Standard

\series bold
main.c
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include "stack.h"
\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	stack* sid;
\end_layout

\begin_layout Plain Layout

	int buffer;
\end_layout

\begin_layout Plain Layout

	sid = stack_create();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	stack_push(sid, 10);
\end_layout

\begin_layout Plain Layout

	stack_push(sid, 15);
\end_layout

\begin_layout Plain Layout

	stack_push(sid, 20);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("Stack contents:
\backslash
n");
\end_layout

\begin_layout Plain Layout

	stack_display(sid);
\end_layout

\begin_layout Plain Layout

	printf("Size: %d
\backslash
n", stack_size(sid));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	buffer = (int)stack_pop(sid);
\end_layout

\begin_layout Plain Layout

	stack_push(sid, 25);
\end_layout

\begin_layout Plain Layout

	stack_push(sid, 30);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("Stack contents:
\backslash
n");
\end_layout

\begin_layout Plain Layout

	stack_display(sid);
\end_layout

\begin_layout Plain Layout

	printf("Size: %d
\backslash
n", stack_size(sid));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	stack_destroy(&sid);
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Output:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

Stack contents:
\end_layout

\begin_layout Plain Layout

(top)
\end_layout

\begin_layout Plain Layout

20
\end_layout

\begin_layout Plain Layout

15
\end_layout

\begin_layout Plain Layout

10
\end_layout

\begin_layout Plain Layout

Size: 3
\end_layout

\begin_layout Plain Layout

Stack contents:
\end_layout

\begin_layout Plain Layout

(top)
\end_layout

\begin_layout Plain Layout

30
\end_layout

\begin_layout Plain Layout

25
\end_layout

\begin_layout Plain Layout

15
\end_layout

\begin_layout Plain Layout

10
\end_layout

\begin_layout Plain Layout

Size: 4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
[Acu√±a] For 
\series bold
\emph on
stack.
\series default
\emph default
h, select the necessary headers, define the needed structs, and write the
 seven collection functions:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Include Files
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Macros: Constants
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Type Definitions
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Function Declarations
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: creates a new stack and returns it.
\end_layout

\begin_layout Plain Layout

//return: error value (zero for success, non-zero for error)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: destroys a stack.
\end_layout

\begin_layout Plain Layout

//return: n/a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: adds an element to the stack
\end_layout

\begin_layout Plain Layout

//return: n/a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: returns the most recently added stack element
\end_layout

\begin_layout Plain Layout

//return: error value (zero for success, non-zero for error)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: returns true if the stack is empty, false otherwise.
\end_layout

\begin_layout Plain Layout

//return value: 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: returns the size of the size.
\end_layout

\begin_layout Plain Layout

//return: number of elements in the stack
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: displays the stack.
\end_layout

\begin_layout Plain Layout

//return: n/a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef STACK_H
\end_layout

\begin_layout Plain Layout

#define STACK_H
\end_layout

\begin_layout Plain Layout

//Author(s): Karaliova, Acuna
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Include Files
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Macros: Constants
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Type Definitions
\end_layout

\begin_layout Plain Layout

typedef struct stack stack;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Function Declarations
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: creates a new stack and returns it.
\end_layout

\begin_layout Plain Layout

//return: error value (zero for success, non-zero for error)
\end_layout

\begin_layout Plain Layout

stack* stack_create(); //can fail (due to memory)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: destroys a stack.
\end_layout

\begin_layout Plain Layout

//return: n/a
\end_layout

\begin_layout Plain Layout

void stack_destroy(stack** sid);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: adds an element to the stack
\end_layout

\begin_layout Plain Layout

//return: n/a
\end_layout

\begin_layout Plain Layout

void stack_push(stack* sid, void* data);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: returns the most recently added stack element
\end_layout

\begin_layout Plain Layout

//return: error value (zero for success, non-zero for error)
\end_layout

\begin_layout Plain Layout

void* stack_pop(stack* sid);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: returns true if the stack is empty, false otherwise.
\end_layout

\begin_layout Plain Layout

//return value: 
\end_layout

\begin_layout Plain Layout

int stack_is_empty(stack* sid);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: 
\end_layout

\begin_layout Plain Layout

//return: number of elements in the stack
\end_layout

\begin_layout Plain Layout

int stack_size(stack* sid);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//purpose: 
\end_layout

\begin_layout Plain Layout

//return: n/a
\end_layout

\begin_layout Plain Layout

void stack_display(stack* sid);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
[Acu√±a] For 
\series bold
\emph on
stack.c
\series default
\emph default
, select the necessary headers, define the needed structs, and write the
 seven collection functions:
\end_layout

\begin_deeper
\begin_layout Enumerate
For 
\emph on
stack.c
\emph default
, write code to bring the proper header files:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Include Files
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Include Files
\end_layout

\begin_layout Plain Layout

#include <stdio.h> 
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include "stack.h"
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For stack.c, define structs for a stack and linked list node.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Structs
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Functions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Structs
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct node node;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct node {
\end_layout

\begin_layout Plain Layout

	void* element;
\end_layout

\begin_layout Plain Layout

	node* next;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct stack {
\end_layout

\begin_layout Plain Layout

	node* head;
\end_layout

\begin_layout Plain Layout

	int size;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//////////////////////////////////////////////////////////////////////
\end_layout

\begin_layout Plain Layout

//Functions
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For stack.c, implement stack_create.
 This function does not take any parameters but will return a new stack
 collection.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

stack* stack_create() {
\end_layout

\begin_layout Plain Layout

	stack* newStack = (stack*)malloc(sizeof(stack));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (newStack == NULL) {
\end_layout

\begin_layout Plain Layout

		printf("Failed to create stack!");
\end_layout

\begin_layout Plain Layout

		exit(0);
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		newStack->head = NULL;
\end_layout

\begin_layout Plain Layout

		newStack->size = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		return newStack;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For 
\emph on
stack.c
\emph default
, implement
\emph on
 stack_destroy.
 
\emph default
This function should take a stack as a parameter and clean up its memory
 allocation(s).
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void stack_destroy(stack** sid) {
\end_layout

\begin_layout Plain Layout

	node* iter = (*sid)->head;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (iter != NULL) {
\end_layout

\begin_layout Plain Layout

		node* tmp = iter->next;
\end_layout

\begin_layout Plain Layout

		free(iter);
\end_layout

\begin_layout Plain Layout

		iter = tmp;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	free(*sid);
\end_layout

\begin_layout Plain Layout

	*sid = NULL;
\end_layout

\begin_layout Plain Layout

    printf("
\backslash
n All stack elements destroyed");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For 
\emph on
stack.c
\emph default
, implement 
\emph on
stack_push
\emph default
.
 This function should take a stack, and an element, as parameters and add
 the element to the top of the stack.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void stack_push(stack* sid, void* data) {
\end_layout

\begin_layout Plain Layout

	node* newNode = (node*)malloc(sizeof(node));
\end_layout

\begin_layout Plain Layout

    if(newNode == NULL) {
\end_layout

\begin_layout Plain Layout

        printf("Stack: failed to allocation memory for new entry.");
\end_layout

\begin_layout Plain Layout

        exit(0);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

	newNode->element = data;
\end_layout

\begin_layout Plain Layout

	newNode->next = sid->head;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	sid->head = newNode;
\end_layout

\begin_layout Plain Layout

	sid->size++;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For 
\emph on
stack.c
\emph default
, implement 
\emph on
stack_pop
\emph default
.This function should take a stack as a parameter and return the element
 at the top of the stack.
 The element should be permanently removed from the stack.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void* stack_pop(stack* sid) {
\end_layout

\begin_layout Plain Layout

    if (sid == NULL || sid->head == NULL)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        printf("
\backslash
n Stack: trying to pop from empty stack.");
\end_layout

\begin_layout Plain Layout

        return NULL;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    	void* element_var = sid->head->element;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    	sid->head = sid->head->next;
\end_layout

\begin_layout Plain Layout

    	sid->size--;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  	  return element_var;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
In 
\emph on
stack.c
\emph default
, implement 
\emph on
stack_is_empty
\emph default
.
 This function should take a stack as a parameter and return true if it
 contains no elements, and false otherwise.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int stack_is_empty(stack* sid) {
\end_layout

\begin_layout Plain Layout

	return sid->size == 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For 
\emph on
stack.c
\emph default
, implement 
\emph on
stack_size
\emph default
.
 This function should return the number of elements in the stack.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int stack_size(stack* sid) {
\end_layout

\begin_layout Plain Layout

	return sid->size;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For 
\emph on
stack.c
\emph default
, implement 
\emph on
stack_display
\emph default
.
 This function should display each element in the stack from top to bottom.
 Assume that values are to be displayed as integers.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void stack_display(stack* sid) {
\end_layout

\begin_layout Plain Layout

	node* iter = sid->head;
\end_layout

\begin_layout Plain Layout

    if(iter != NULL) {
\end_layout

\begin_layout Plain Layout

    	printf("(top)
\backslash
n");
\end_layout

\begin_layout Plain Layout

    	while (iter != NULL) {
\end_layout

\begin_layout Plain Layout

    		printf("%d
\backslash
n", (int)iter->element);
\end_layout

\begin_layout Plain Layout

    		iter = iter->next;
\end_layout

\begin_layout Plain Layout

    	}
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

        printf("Stack is empty
\backslash
n");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section*
Handling Binary Files
\end_layout

\end_deeper
\begin_layout Enumerate
TODO
\end_layout

\end_body
\end_document
