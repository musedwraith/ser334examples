#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\size huge
SER 334 
\series bold
Practice
\series default
 Exam 2
\end_layout

\begin_layout Standard
\align center
Updated 1/1/2019
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
Last Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{6cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{5.94cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Last 4 digits of ASU ID: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{4.05cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
Exam Instructions
\end_layout

\begin_layout Standard
The exam is open textbook (Operating System Concepts by Silberschatz, Galvin
 and Gagne), as well as open note.
 
\bar under
No electronic items are allowed.
 Write legibly.

\bar default
 Please use a pen (instead of a pencil) if you have one.
 There are 100 points available and the exam must be completed in 37.5 minutes.
 This exam has two types of questions:
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short answer questions:
\series default
 There are 100 points of short answer questions.
 A typical answer is two or three sentences.
 Each short answer question is worth ~10 points.
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Scenario questions:
\series default
 The programming questions are given near the end of the paper.
 They must be answered on the question paper.
 There are 0 points of write-in programming questions.
\end_layout

\begin_layout Standard
\begin_inset VSpace 9cm
\end_inset


\end_layout

\begin_layout Standard
\align right
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Topic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\;\;\;\;$
\end_inset


\begin_inset Formula $\;\;$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Possible
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Threads
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Process Synchronization
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scen: Threads
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scen: Process Synchronization
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Threads
\end_layout

\begin_layout Enumerate
Is it faster to switch between processes or threads within those processes?
 Explain.
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Suppose you were computing the summation of 0 to N.
 What speed advantages would using OpenMP (from the operations shown in
 class) offer over a single-threaded solution? Explain and be specific (in
 terms of OpenMP commands).
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 3cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Process Synchronization
\end_layout

\end_deeper
\begin_layout Enumerate
Consider the semaphore based solution we had for the reader-writer problem:
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

semaphore rw_mutex = 1;
\end_layout

\begin_layout Plain Layout

semaphore rc_mutex = 1;
\end_layout

\begin_layout Plain Layout

int read_count = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//writer process
\end_layout

\begin_layout Plain Layout

do {
\end_layout

\begin_layout Plain Layout

    wait(rw_mutex);
\end_layout

\begin_layout Plain Layout

    /* writing is performed */
\end_layout

\begin_layout Plain Layout

    signal(rw_mutex);
\end_layout

\begin_layout Plain Layout

} while (true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//reader process
\end_layout

\begin_layout Plain Layout

do {
\end_layout

\begin_layout Plain Layout

    wait(rc_mutex);
\end_layout

\begin_layout Plain Layout

    read_count++;
\end_layout

\begin_layout Plain Layout

    if (read_count == 1)
\end_layout

\begin_layout Plain Layout

        wait(rw_mutex);
\end_layout

\begin_layout Plain Layout

    signal(rc_mutex);
\end_layout

\begin_layout Plain Layout

    /* reading is performed */
\end_layout

\begin_layout Plain Layout

    wait(rc_mutex);
\end_layout

\begin_layout Plain Layout

    read_count--;
\end_layout

\begin_layout Plain Layout

    if (read_count == 0)
\end_layout

\begin_layout Plain Layout

        signal(rw_mutex);
\end_layout

\begin_layout Plain Layout

    signal(rc_mutex);
\end_layout

\begin_layout Plain Layout

} while (true);
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What functionality does the logic involving read_count and rc_mutex provide?
 [10 points]
\end_layout

\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
In pthreads, mutex support involves three functions and a new type:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

typedef pthread_mutex_t
\end_layout

\begin_layout Plain Layout

int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t
 *attr);
\end_layout

\begin_layout Plain Layout

int pthread_mutex_lock(pthread_mutex_t *mutex);
\end_layout

\begin_layout Plain Layout

int pthread_mutex_unlock(pthread_mutex_t *mutex); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
How does this functionality address (or does not address) the issues of
 Mutual Exclusion, Progress, and Bounded Waiting Time? [10 points]
\end_layout

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Scenario: Threads, Process Synchronization
\end_layout

\begin_layout Standard

\emph on
If this was the actual exam, there might be a question here asking you to
 do programming with pthreads, and mutexes and/or semaphores.
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $ $
\end_inset


\end_layout

\end_deeper
\end_body
\end_document
