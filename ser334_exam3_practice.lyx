#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\size huge
SER 334 
\series bold
Practice
\series default
 Exam 3
\end_layout

\begin_layout Standard
\align center
Updated 1/1/2019
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
Last Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{6cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{5.94cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Last 4 digits of ASU ID: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{4.05cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
Exam Instructions
\end_layout

\begin_layout Standard
The exam is open textbook (Operating System Concepts by Silberschatz, Galvin
 and Gagne), as well as open note.
 
\bar under
No electronic items are allowed.
 Write legibly.

\bar default
 Please use a pen (instead of a pencil) if you have one.
 There are 90 points available and the exam must be completed in 37.5 minutes.
 This exam has two types of questions:
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short answer questions:
\series default
 There are 110 points of short answer questions.
 A typical answer is two or three sentences.
 Each short answer question is worth ~10 points.
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Scenario questions:
\series default
 The programming questions are given near the end of the paper.
 They must be answered on the question paper.
 There are 0 points of write-in programming questions.
\end_layout

\begin_layout Standard
\begin_inset VSpace 10cm
\end_inset


\end_layout

\begin_layout Standard
\align right
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Topic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\;\;\;\;$
\end_inset


\begin_inset Formula $\;\;$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Possible
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: CPU Scheduling
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Main Memory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Virtual Memory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Mass-Storage Structure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: CPU Scheduling
\end_layout

\begin_layout Enumerate
Would it make sense to use a periodic/priority scheduler for a system where
 new jobs are created all the time? Explain.
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Consider the following set of processes (tuples look like process, burst
 size): (P0, 10), (P1, 30), (P2, 15), (P3, 5).
 Assume the processes arrive in this order as well.
 Compute the average waiting time and average turnaround time for the following
 algorithms, and answer the final question:
\end_layout

\begin_deeper
\begin_layout Enumerate
First-Come First-Served [10 point]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Round Robin Scheduling (use time quantum 10) [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
In a multi-level feedback queue, why does the first queue typically use
 a smaller time quantum than the later ones? (That is, what does that design
 choice maximize.) [10 points] 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
FC17 Final
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Main Memory [20 points]
\end_layout

\end_deeper
\begin_layout Enumerate
Why is having both logical and physical addresses necessary in an operating
 system - why are both needed? Can't they be the same? Explain.
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Assume that we use a 32-bit unsigned integer to represent logical addresses,
 within which there are bits for a page number and bits for an offset.
 Does the choice of how many bits are used for each (offset or page number),
 impact the size of the logical address space? Explain.
 (Keep in mind that if n bits are used for offset then 32-n will be used
 for page number.)  [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Virtual Memory [30 points]
\end_layout

\end_deeper
\begin_layout Enumerate
Dealing with a page fault is expensive and something to avoid.
 In addition to carefully maintaining our active frames, we can also avoid
 page faults by wisely picking which parts of a process should be initially
 loaded.
 How might we pick which to initially load? Assume that you cannot load
 the entire process and you want to select the most worthwhile pages.
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Consider the following reference string for page lookups: 7, 5, 9, 9, 5,
 5, 6, 7.
 Compute the number of page faults that would occur with FIFO, and give
 a trace of the cache, assuming 3 pages may be kept in memory.
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Consider the following reference string for page lookups: 7, 5, 9, 9, 5,
 5, 6, 7.
 Compute the number of page faults that would occur with LRU, and give a
 trace of the cache, assuming 3 pages may be kept in memory.
 [10 point]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Mass-Storage Structure [20 points]
\end_layout

\end_deeper
\begin_layout Enumerate
[Silberschatz 10.10 edited] Explain why SSDs often use an FCFS disk-scheduling
 algorithm.
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
What impact does HDD storage capacity have on HDD read/write speed? Say
 for a 2TB vs 3TB drive.
 Assume that the number of platters stay the same.
 [10 points] 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
SC18 final exam.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\series bold

\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
Short Answer: Network Programming, Security [2 points]
\end_layout

\begin_layout Enumerate
[Silberschatz 15.2] A password may become known to other users in a variety
 of ways.
 Is there a simple method for detecting that such an event has occurred?
 Explain your answer.
 [2 points]
\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset VSpace 5cm
\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\series bold
Scenario: C Programming Review [0 points]
\end_layout

\end_deeper
\begin_layout Enumerate
(BONUS PRACTICE QUESTION) The following declaration of a struct is used
 to represent a node in a linked list of grades.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct node {
\end_layout

\begin_layout Plain Layout

    int value;
\end_layout

\begin_layout Plain Layout

    char assignment[255];
\end_layout

\begin_layout Plain Layout

    struct grade_node* next;
\end_layout

\begin_layout Plain Layout

}; 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to speed up a program which uses this node struct, you have been
 asked to implement a pooled memory allocator for it.
 Complete the void freeNode(struct node*) function shown below.
 This function should do the equivalent of C's standard free, but in terms
 of a memory pool.
 Assume that there is a global variable called pool_head which stores the
 nodes in the memory pool, and a variable called pool_size which stores
 the number of allocations in the pool.
 Enforce that the pool may contain a maximum of 16 allocations.
 [4 points] 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//...
\end_layout

\begin_layout Plain Layout

struct node* pool_head = NULL; //value will change during execution
\end_layout

\begin_layout Plain Layout

int pool_size = 0; //value will change during execution
\end_layout

\begin_layout Plain Layout

//...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void freeNode(struct node*) {
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 6cm
\end_inset


\end_layout

\end_deeper
\end_body
\end_document
