#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\branch blank
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch soln
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
Arizona State University
\begin_inset space \hfill{}
\end_inset

SER334: Operating Systems & Networks
\end_layout

\begin_layout Standard
\noindent
Lecturer Acuña
\begin_inset space \hfill{}
\end_inset

Revised 12/31/2018
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size huge
Sample Problems - Parallel Programming 
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\size huge
(SOLN)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Itemize
Length: 50 minutes with discussion.
\end_layout

\begin_layout Itemize
Questions: Q2-Q3, Q5-Q7 (optional: Q1, Q4)
\end_layout

\begin_layout Standard
Learning Objectives:
\end_layout

\begin_layout Itemize
Be able to describe key concepts in parallel programming.
 (Q
\begin_inset CommandInset ref
LatexCommand ref
reference "parallel_patterns"

\end_inset

, Q
\begin_inset CommandInset ref
LatexCommand ref
reference "cfg_vs_dfg"

\end_inset

, Q
\begin_inset CommandInset ref
LatexCommand ref
reference "dfg_generalization"

\end_inset

, Q
\begin_inset CommandInset ref
LatexCommand ref
reference "serial_issues"

\end_inset

)
\end_layout

\begin_layout Itemize
Be able to draw a Data Flow Graph for a sequential program.
 (Q
\begin_inset CommandInset ref
LatexCommand ref
reference "draw_dfg"

\end_inset

)
\end_layout

\begin_layout Itemize
Be able to determine if a function written in C is a pure function.
 (Q
\begin_inset CommandInset ref
LatexCommand ref
reference "check_if_pure"

\end_inset

)
\end_layout

\begin_layout Itemize
Be able to write a functional style algorithm using structured parallel
 programming patterns.
 (Q
\begin_inset CommandInset ref
LatexCommand ref
reference "write_functional_code"

\end_inset

)
\end_layout

\begin_layout Section*
\begin_inset Formula $\;\;\;\;\;\;$
\end_inset

Introduction
\end_layout

\begin_layout Enumerate
[Acuña] Say we have a program that is written without usage of threads or
 processes.
 How does structuring this program with "parallel patterns" allow the program
 to run sections of its code in parallel?
\begin_inset CommandInset label
LatexCommand label
name "parallel_patterns"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status open

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
Normally compilers have a hard time telling which pieces of code are independent
 and can be executed side by side.
 Instead of directly telling the compiler what code to execute in parallel,
 parallel structures let us specify how data will flow through a program.
 The compiler can examine the data flow and try to automatically make your
 program parallel in the best possible way.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] For some simple programs, a CFG and DFG will appear very similar
 - at least in number of edges and nodes.
 What type of program statements would result in a more complicated CFG
 than DFG? 
\begin_inset CommandInset label
LatexCommand label
name "cfg_vs_dfg"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status open

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
Any type of flow control conditionals.
 For example, with an 
\family typewriter
if
\family default
 statement a CFG will need to represent both branches, since either is a
 valid path of execution for the code.
 The DFG will only need to represent one branch - when the program runs,
 only one branch will be executed and so only that choice of branch needs
 to be recorded.
\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Nested Programs
\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] Consider the following algorithm outline:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C = f(A);
\end_layout

\begin_layout Plain Layout

D = g(B, C);
\end_layout

\begin_layout Plain Layout

F = p(C);
\end_layout

\begin_layout Plain Layout

E = i(C);
\end_layout

\begin_layout Plain Layout

G = j(D, E);
\end_layout

\begin_layout Plain Layout

H = q(F, G)
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
For the program shown above, draw a data flow graph.
\begin_inset CommandInset label
LatexCommand label
name "draw_dfg"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status open

\begin_layout Standard
\begin_inset VSpace 8cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename opt_module_spp3/sp/ser334_unit9_sample_problems_soln_q3a.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Could the above graph (a DFG) be used to reconstruct the original program?
 Is your answer generalizable to other programs? Explain both answers.
 
\begin_inset CommandInset label
LatexCommand label
name "dfg_generalization"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status open

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
Yes.
 Since this program does not include any control flow, the graph is capable
 of capturing all the commands that need to be executed.
 (Everything must run.) In general, it's not possible though, since a DFG
 contains information about how data was generated for a specific run of
 a program.
 The rest of the program not executed (due to flow control choices) will
 not be visible.
\end_layout

\begin_layout Standard
\begin_inset VSpace 3cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
[Acuña] Consider the following algorithm outline:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

D = p(A, B);
\end_layout

\begin_layout Plain Layout

E = q(B);
\end_layout

\begin_layout Plain Layout

F = r(C);
\end_layout

\begin_layout Plain Layout

G = s(C, E, F);
\end_layout

\begin_layout Plain Layout

H = t(B, D);
\end_layout

\begin_layout Plain Layout

I = u(G, H);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the program shown above, draw a data flow graph.
\begin_inset CommandInset label
LatexCommand label
name "draw_dfg-1"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 8cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename opt_module_spp3/sp/ser334_unit9_sample_problems_soln_q4.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] Consider the following C function:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

struct point shift_point(struct point_2d p1, struct point_2d p2) {
\end_layout

\begin_layout Plain Layout

    struct point_2d result;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    result.x = p1.x + p2.x;
\end_layout

\begin_layout Plain Layout

    result.y = p1.y + p2.y;
\end_layout

\begin_layout Plain Layout

    p1 = result;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return result;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Is this function pure? Explain.
 
\begin_inset CommandInset label
LatexCommand label
name "check_if_pure"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch blank
inverted 0
status open

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Acuña] 
\end_layout

\begin_layout Standard
Yes, it is pure.
 All of the parameter variables are pass by value, without any pointers,
 and so no changes to them in the function will impact the outside scope.
 It also does not use any global variables or otherwise read anything that
 would cause it to produce different outputs for the same input.
\end_layout

\begin_layout Standard
\begin_inset VSpace 3cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Issues in Serial Programs
\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] What would prevent a program made out of sequential commands from
 being able to be parallelized? 
\begin_inset CommandInset label
LatexCommand label
name "serial_issues"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status open

\begin_layout Standard
\begin_inset VSpace 6cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
There are multiple possible answers.
 Here are two examples: First, each line, even if calling a pure function,
 could have a linear dependence on the computation performed by the previous
 line.
 For example: A=f(INPUT); B=g(A); C=h(B); D=i(C);.
 Second, each of the functions (f, g, c, i) might be impure, therefore it
 would be fair game for them to main global state changes that impact any
 functions that run after them.
\end_layout

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Parallel Control Patterns
\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] For the following problem(s), write a functional style (and easily
 parallelizable) algorithm.
 Use pseudocode.
 You may assume the following functions are available for you to use: 
\begin_inset CommandInset label
LatexCommand label
name "write_functional_code"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
• linked_list create_number_list(int start, int end)
\end_layout

\begin_layout Standard
• linked_list split(string text)
\end_layout

\begin_layout Standard
• linked_list map(void* function, linked_list data)
\end_layout

\begin_layout Standard
• linked_list filter(void*function, linked_list data)
\end_layout

\begin_layout Standard
• void* reduce(void* function, linked_list data)
\end_layout

\begin_layout Enumerate
Write a function to compute the factorial of a number n with the signature
 "int fact(int n)".
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int fact(int n) {
\end_layout

\begin_layout Plain Layout

    return reduce(*, create_number_list(1, n));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Write a function that applies a 1 character shift cypher to a string with
 the signature "string encrypt(string txt)".
 For example encrypt("sometext") returns "tpnfufyu".
 Feel free to write helper functions when needed.
\end_layout

\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

char shift(char a) {
\end_layout

\begin_layout Plain Layout

    return a + 1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

string encrypt(string txt) {
\end_layout

\begin_layout Plain Layout

    return reduce(+, map(shift, split(txt)));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Section*
Parallel Data Patterns
\end_layout

\begin_layout Enumerate
[Acuña] Consider the problem of doing image processing and implementing
 data decomposition to support parallelization.
 What specific type of image operations could use a partition method? What
 would need geometric?
\begin_inset CommandInset label
LatexCommand label
name "data_patterns-1"

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\end_deeper
\end_body
\end_document
